name: Generate Changelog

on:
  push:
    branches: [ main ]
  release:
    types: [published]

jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      uses: orhun/git-cliff-action@v2
      id: git-cliff
      with:
        config: cliff.toml
        args: --verbose
      env:
        OUTPUT: CHANGELOG.md
    
    - name: Create cliff.toml if it doesn't exist
      run: |
        if [ ! -f cliff.toml ]; then
          cat > cliff.toml << 'EOF'
        [changelog]
        header = """
        # Changelog
        All notable changes to this project will be documented in this file.
        
        The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
        and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
        
        """
        body = """
        {% if version %}\
            ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
        {% else %}\
            ## [unreleased]
        {% endif %}\
        {% for group, commits in commits | group_by(attribute="group") %}
            ### {{ group | upper_first }}
            {% for commit in commits %}
                - {{ commit.message | upper_first }}\
            {% endfor %}
        {% endfor %}\n
        """
        footer = """
        <!-- generated by git-cliff -->
        """
        
        [git]
        conventional_commits = true
        filter_unconventional = true
        split_commits = false
        commit_preprocessors = []
        commit_parsers = [
            { message = "^feat", group = "Features"},
            { message = "^fix", group = "Bug Fixes"},
            { message = "^doc", group = "Documentation"},
            { message = "^perf", group = "Performance"},
            { message = "^refactor", group = "Refactor"},
            { message = "^style", group = "Styling"},
            { message = "^test", group = "Testing"},
            { message = "^chore\\(release\\): prepare for", skip = true},
            { message = "^chore", group = "Miscellaneous Tasks"},
            { body = ".*security", group = "Security"},
        ]
        protect_breaking_commits = false
        filter_commits = false
        tag_pattern = "v[0-9]*"
        skip_tags = "v0.1.0-beta.1"
        ignore_tags = ""
        topo_order = false
        sort_commits = "oldest"
        EOF
        fi
    
    - name: Commit changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md cliff.toml
        git diff --staged --quiet || git commit -m "chore: update changelog"
        git push
    
    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: CHANGELOG.md

  release-notes:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: changelog
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract release notes
      run: |
        # Extract the latest version's changelog for release notes
        python3 << 'EOF'
        import re
        
        with open('CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Find the first version section
        pattern = r'## \[([^\]]+)\].*?\n(.*?)(?=\n## \[|\n<!-- generated by git-cliff -->|\Z)'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            version = match.group(1)
            notes = match.group(2).strip()
            
            with open('release-notes.md', 'w') as f:
                f.write(f"# Release Notes for v{version}\n\n")
                f.write(notes)
        else:
            with open('release-notes.md', 'w') as f:
                f.write("# Release Notes\n\nNo changelog entries found.")
        EOF
    
    - name: Update release with changelog
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseNotes
          });