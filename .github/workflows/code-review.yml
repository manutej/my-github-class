name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install review tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 bandit safety pylint
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Code quality check with pylint
      run: |
        pylint src/ --output-format=json > pylint-report.json || true
    
    - name: Comment PR with review results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🤖 Automated Code Review Results\n\n';
          
          // Check if reports exist and add results
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            if (banditReport.results && banditReport.results.length > 0) {
              comment += '### 🔒 Security Issues Found\n';
              banditReport.results.forEach(issue => {
                comment += `- **${issue.test_name}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
              });
            } else {
              comment += '### ✅ No security issues found\n';
            }
          } catch (e) {
            comment += '### ❓ Security scan: Could not parse results\n';
          }
          
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            if (safetyReport.length > 0) {
              comment += '\n### 🚨 Vulnerable Dependencies\n';
              safetyReport.forEach(vuln => {
                comment += `- **${vuln.package}** ${vuln.installed_version}: ${vuln.advisory}\n`;
              });
            } else {
              comment += '\n### ✅ No vulnerable dependencies found\n';
            }
          } catch (e) {
            comment += '\n### ❓ Dependency check: Could not parse results\n';
          }
          
          comment += '\n---\n*This review was automatically generated. Please address any issues before merging.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  complexity-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install complexity tools
      run: |
        pip install radon xenon
    
    - name: Check code complexity
      run: |
        echo "## Code Complexity Report" > complexity-report.md
        echo "### Cyclomatic Complexity" >> complexity-report.md
        radon cc . -s >> complexity-report.md
        echo "### Maintainability Index" >> complexity-report.md
        radon mi . -s >> complexity-report.md
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v3
      with:
        name: complexity-report
        path: complexity-report.md